<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何创建属于自己的个人博客-实战篇</title>
    <url>/2020/04/27/create-blog/</url>
    <content><![CDATA[<p>趁着这次疫情在家自己搭建了一个个人博客，针对于 NexT 主题进行了多次优化。下面我将自己搭建的过程记录下来，为想要自己搭建博客的同学提供参考。</p>
<a id="more"></a>

<h3 id="1-开始搭建我们的博客"><a href="#1-开始搭建我们的博客" class="headerlink" title="1. 开始搭建我们的博客"></a>1. 开始搭建我们的博客</h3><ol>
<li><p>准备条件</p>
<p>首先我们得需要自己注册一个 Github 账号，地址为：<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> ， GitHub Pages 帮助我们来架设一个静态网站，这就解决了服务器的问题。</p>
<p>Hexo 这个是一个博客框架，号称是一个快速，简单和签那个大的博客框架。事实也是证明如此。</p>
</li>
<li><p>新建项目</p>
<p>在 GitHub 上建立一个<a href="https://github.com/new" target="_blank" rel="noopener">仓库 </a>，Repository name 初填写 {username}.github.io ，假设你的账户名师 zhangsan，那么这里就是 zhangsan.github.io 。必须以 github.io 为后缀结尾。</p>
</li>
<li><p>在 GitHub 上配置 SSH Key</p>
<p>生成本地密钥：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>

<p>进入到本地密钥的存放路径：/Users/ 用户名 /.ssh/ ，公钥存放在 id_rsa 文件中；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat id_rsa</span><br></pre></td></tr></table></figure>

<p>复制 shh 公钥，添加到 GitHub 中去。</p>
<img src="/2020/04/27/create-blog/add_sshkey.png" alt="ssh公钥配置" style="zoom:35%;">
</li>
<li><p>安装环境 Node 、Hexo</p>
<p><strong>安装Node.js</strong></p>
<p>首先在自己的电脑上安装 Node.js，下载地址：<a href="https://nodejs.org/zh-cn/download/，可以安装" target="_blank" rel="noopener">https://nodejs.org/zh-cn/download/，可以安装</a> Stable 版本。</p>
<p>安装完毕之后，确保环境变量配置好，能正常使用 <code>npm</code> 命令。</p>
<p><strong>安装Hexo</strong></p>
<p>接下来就需要安装 Hexo 了，这是一个博客框架，Hexo 官方还提供了一个命令行工具，用于快速创建项目、页面、编译、部署 Hexo 博客，所以在这之前我们需要先安装 Hexo 的命令行工具。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化项目</p>
<p>接下来我们使用 Hexo 的命令行创建一个项目，并将其在本地跑起来，整体跑通看看。</p>
<p>首先使用如下命令创建项目：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init &#123;name&#125;</span><br></pre></td></tr></table></figure>

<p>这里的 name 就是我们的项目名称，我们这里要创建为项目名为 Blog 的博客，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>

<p>这样我们的文件夹下面就会有 Hexo 的初始化文件。</p>
<p>接下来我们首先进入新生成的文件夹里面，然后调用 Hexo 的 generate 命令，将 Hexo 编译生成 HTML 代码，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>这里也可以使用 hexo g 来简写。然后我们利用 Hexo 提供的 server 命令把博客在本地运行起来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http:&#x2F;&#x2F;localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<p>此时访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a> 即可显示出 Hexo 默认的主题信息博客。</p>
<img src="/2020/04/27/create-blog/hello_hexo.png" alt="hexo_index" style="zoom:50%;">

<p>那么此时我们的博客架子就已经出来了。这里关于生成和本地预览可以使用命令 <code>hexo s -g</code></p>
</li>
<li><p><strong>常用的Hexo命令</strong></p>
<img src="/2020/04/27/create-blog/hexo_command.png" alt="hexo_command" style="zoom:50%;">
</li>
<li><p>选择 Hexo 主题：NexT</p>
<p>关于主题目前 GitHub 上有两个版本的 NexT 主题</p>
<p>a：git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> themes/next</p>
<p>b：git clone <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a> themes/next</p>
<p>第二个是目前 NexT 的官方版本，会持续进行更新，所以我选择的是这个版本，关于对于 NexT 中的个性化设置也是基于此版本进行的。所以推荐你使用第二个版本。</p>
<p>进入到项目文件夹 blog 中 <code>cd blog</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

<p>执行完毕后在 themes 文件下，有一个 next 的主题文件。</p>
<p>修改我们项目目录下的配置文件_config.yml 文件，找到 theme 字段，修改为 next 即可，修改如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<p>执行：<code>hexo s -g</code> 即可生成静态页面至 public 目录下，并且可以进行本地预览。</p>
</li>
</ol>
<pre><code>那么到此我们的第一步就已经完成了，喝口水，休息下，让我们来准备好下一步的配置吧。</code></pre><h3 id="2-个性化设置-NexT"><a href="#2-个性化设置-NexT" class="headerlink" title="2. 个性化设置 NexT"></a>2. 个性化设置 NexT</h3><p>​        <strong>修改前需要对项目配置文件和主题配置文件有一定的了解</strong></p>
<p>​        我们针对于主题的个性话设置全在主题的配合文件下</p>
<p>​        <img src="/2020/04/27/create-blog/next_config.png" alt="next_config" style="zoom:50%;"></p>
<ol>
<li><p>选择NexT的样式 <code>Scheme Settings</code> scheme: Pisces <code>sidebar:</code> position: left</p>
</li>
<li><p>代码块调整 <code>codeblock</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">codeblock: # 代码块特效</span><br><span class="line">  # Code Highlight theme</span><br><span class="line">  # Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span><br><span class="line">  # See: https:&#x2F;&#x2F;github.com&#x2F;chriskempson&#x2F;tomorrow-theme</span><br><span class="line">  highlight_theme: night bright</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # Show text copy result.</span><br><span class="line">    show_result: true</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style: mac</span><br></pre></td></tr></table></figure>
</li>
<li><p>阅读进度百分比</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  enable: true</span><br><span class="line">  # Back to top in sidebar.</span><br><span class="line">  sidebar: false</span><br><span class="line">  # Scroll percent label in b2t button.</span><br><span class="line">  scrollpercent: true #显示阅读百分比</span><br></pre></td></tr></table></figure>
</li>
<li><p>github_banner 显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">github_banner:</span><br><span class="line">  enable: true</span><br><span class="line">  permalink: https:&#x2F;&#x2F;github.com&#x2F;Lofoer</span><br><span class="line">  title: Follow me on GitHub</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="5">
<li><p>添加Valine评论 <a href="https://leancloud.cn/dashboard/applist.html#/apps" target="_blank" rel="noopener">https://leancloud.cn/dashboard/applist.html#/apps</a></p>
<p>为什么会选择这个评论呢，一个方面就是界面简单，第二个就是配置起来也超级方便，因为我们的博客是静态博客，那么对于评论的数据来说是动态的，需要存储的，那么我们就需要借助一个平台来存储评论，这个时候我们通过 LeanCloud 这个网站来进行，注册应用后，会有 appkey &amp; appid 我们只需要添加授权码和 ID 我们的博客就有评论的功能了。非常简单。</p>
</li>
</ol>
<ol start="6">
<li><p>添加分类页</p>
<p><strong>分类页</strong>    </p>
<p>分类功能和标签类似，一个文章可以对应某个分类，如果要增加分类页面可以使用如下命令创建：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<p>然后同样地，会生成一个 source/categories/index.md 文件。</p>
<p>我们可以自行添加一个 type 字段来指定页面的类型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type: categories</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure>

<p><strong>添加文章</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new hello-world</span><br></pre></td></tr></table></figure>

<p>创建的文章会出现在 <code>source/_posts</code> 文件夹下，是 MarkDown 格式。如果你对 Makedown 不了解的话，那么先百度下啦。这里的编译器我推荐用 <code>Typora</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2020-04-19 01:23:51</span><br><span class="line">categories: hexo</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="7">
<li><p>添加搜索功能 hexo-generator-searchdb</p>
<p>搜索页需要安装一个插件叫做：hexo-generator-searchdb</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>在我们的项目<strong>hexo_config</strong>目录下配置如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">path: search.xml</span><br><span class="line">field: post</span><br><span class="line">format: html</span><br><span class="line">limit: 10000</span><br></pre></td></tr></table></figure>

<p>主题<strong>next_config</strong>的配置文件下修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local Search</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-generator-searchdb</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # If auto, trigger search by changing input.</span><br><span class="line">  # If manual, trigger search by pressing enter key or search button.</span><br><span class="line">  trigger: auto</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="8">
<li><p>侧边栏社交链接 &amp; 友情链接</p>
<img src="/2020/04/27/create-blog/social_config.png" alt="social" style="zoom:38%;">

<img src="/2020/04/27/create-blog/links_config.png" alt="links" style="zoom:50%;">
</li>
<li><p>显示评论数</p>
<p>打开 <code>themes -&gt; next -&gt; languages -&gt; zh-CN.yml</code> 在 POST 标签下 comments.valine: 评论数 #可以自定义</p>
</li>
</ol>
<ol start="10">
<li><p>添加阅读时长 <code>npm install hexo-symbols-count-time</code></p>
<p>在我们的项目<strong>hexo_config</strong>目录下配置如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 阅读时长</span><br><span class="line">symbols_count_time:</span><br><span class="line">symbols: true</span><br><span class="line">time: true</span><br><span class="line">total_symbols: true</span><br><span class="line">total_time: true</span><br><span class="line">exclude_codeblock: false</span><br><span class="line">awl: 2</span><br><span class="line">wpm: 275</span><br><span class="line">suffix: &quot;mins.&quot;</span><br></pre></td></tr></table></figure>

<p>主题<strong>next_config</strong>的配置文件下修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-symbols-count-time</span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: false</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="11">
<li><p>打赏</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reward:</span><br><span class="line">  wechatpay: &#x2F;images&#x2F;wechatpay.jpeg</span><br><span class="line">  #alipay: &#x2F;images&#x2F;alipay.png</span><br><span class="line">  #paypal: &#x2F;images&#x2F;paypal.png</span><br><span class="line">  #bitcoin: &#x2F;images&#x2F;bitcoin.png</span><br><span class="line"> </span><br><span class="line"> reward_settings:</span><br><span class="line">  # If true, reward will be displayed in every article by default.</span><br><span class="line">  enable: true</span><br><span class="line">  animation: false</span><br><span class="line">  comment: 您的支持将鼓励我继续创作！</span><br></pre></td></tr></table></figure>

<p>打赏设置 <code>comment</code> 是打赏的提示语，打赏的图片可以放在主题的 images 下。</p>
</li>
<li><p>图片显示</p>
<p>图片显示，目前有很多是通过第三方的图片云来进行图片的存储，但是目前我这里是通过 Hexo 插件把图片上传到 GitHub 上进行显示的，从效率上看，使用 Makedown 来添加本地照片就能显示。下面就开始放大招具体说说怎么做。</p>
<p><strong>第一步安装插件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p><strong>第二步打开 Hexo 配置文件</strong>_config.yml</p>
<p> 找到 post_asset_folder，把这个选项从 false 改为 true</p>
<p><strong>第三步修改 index.js 文件</strong></p>
<p>/node_modules/hexo-asset-image/index.js js 文件 替换如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &#39;use strict&#39;;</span><br><span class="line">var cheerio &#x3D; require(&#39;cheerio&#39;);</span><br><span class="line">     </span><br><span class="line">     &#x2F;&#x2F; http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;14480345&#x2F;how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line">     function getPosition(str, m, i) &#123;</span><br><span class="line">     return str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line">     var version &#x3D; String(hexo.version).split(&#39;.&#39;);</span><br><span class="line">     hexo.extend.filter.register(&#39;after_post_render&#39;, function(data)&#123;</span><br><span class="line">     var config &#x3D; hexo.config;</span><br><span class="line">     if(config.post_asset_folder)&#123;</span><br><span class="line">             var link &#x3D; data.permalink;</span><br><span class="line">         if(version.length &gt; 0 &amp;&amp; Number(version[0]) &#x3D;&#x3D; 3)</span><br><span class="line">         var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 1) + 1;</span><br><span class="line">         else</span><br><span class="line">         var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 3) + 1;</span><br><span class="line">         &#x2F;&#x2F; In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;...&#x2F;about&#x2F;index.html&quot;.</span><br><span class="line">         var endPos &#x3D; link.lastIndexOf(&#39;&#x2F;&#39;) + 1;</span><br><span class="line">    link &#x3D; link.substring(beginPos, endPos);</span><br><span class="line">     </span><br><span class="line">         var toprocess &#x3D; [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];</span><br><span class="line">         for(var i &#x3D; 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">         var key &#x3D; toprocess[i];</span><br><span class="line">     </span><br><span class="line">         var $ &#x3D; cheerio.load(data[key], &#123;</span><br><span class="line">             ignoreWhitespace: false,</span><br><span class="line">             xmlMode: false,</span><br><span class="line">             lowerCaseTags: false,</span><br><span class="line">             decodeEntities: false</span><br><span class="line">    &#125;);</span><br><span class="line">     </span><br><span class="line">         $(&#39;img&#39;).each(function()&#123;</span><br><span class="line">             if ($(this).attr(&#39;src&#39;))&#123;</span><br><span class="line">                 &#x2F;&#x2F; For windows style path, we replace &#39;\&#39; to &#39;&#x2F;&#39;.</span><br><span class="line">                 var src &#x3D; $(this).attr(&#39;src&#39;).replace(&#39;\\&#39;, &#39;&#x2F;&#39;);</span><br><span class="line">                 if(!&#x2F;http[s]*.*|\&#x2F;\&#x2F;.*&#x2F;.test(src) &amp;&amp;</span><br><span class="line">                 !&#x2F;^\s*\&#x2F;&#x2F;.test(src)) &#123;</span><br><span class="line">                 &#x2F;&#x2F; For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.</span><br><span class="line">                 &#x2F;&#x2F; In addition, to support multi-level local directory.</span><br><span class="line">                 var linkArray &#x3D; link.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class="line">                     return elem !&#x3D; &#39;&#39;;</span><br><span class="line">                 &#125;);</span><br><span class="line">                 var srcArray &#x3D; src.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class="line">                     return elem !&#x3D; &#39;&#39; &amp;&amp; elem !&#x3D; &#39;.&#39;;</span><br><span class="line">                 &#125;);</span><br><span class="line">                 if(srcArray.length &gt; 1)</span><br><span class="line">                     srcArray.shift();</span><br><span class="line">                 src &#x3D; srcArray.join(&#39;&#x2F;&#39;);</span><br><span class="line">                 $(this).attr(&#39;src&#39;, config.root + link + src);</span><br><span class="line">                 console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;else&#123;</span><br><span class="line">                 console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class="line">                 console.info&amp;&amp;console.info($(this));</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">         data[key] &#x3D; $.html();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure>

<p><strong>第四步使用</strong></p>
<p>当我们使用 hexo 命令新建一篇文章时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new 文章名</span><br></pre></td></tr></table></figure>

<p>在 source/_posts 文件下会生成一个后缀为.md 的文件和一个文章名的文件夹，我们在这个里面上传图片。</p>
<p><strong>第五步使用图片</strong></p>
<p>在 Makedown 中引用图片时候，注意文件路径节点是用文章名开头的相对路径，并不是图片的绝对路径，这里一定要注意。</p>
<img src="/2020/04/27/create-blog/upload_img.png" alt="create_blog_solurl" style="zoom:60%;">

<img src="/2020/04/27/create-blog/upload_image_example.png" style="zoom:50%;">

<p><strong>图片使用相对于当前文件夹的图片路径。</strong></p>
</li>
</ol>
<ol start="13">
<li><p>修改详情文章的tag图标</p>
<p>修改模板 <code>/themes/next/layout/_macro/post.swig</code>，搜索`，把#号替换成为 {i class=”fa fa-tags”}{/i} ‘{}’ -&gt; 替换为’&lt;&gt;’</p>
</li>
</ol>
<ol start="14">
<li><p>全局调整字体大小  themes\next\source\css_variables<code>下的</code>base.styl</p>
<p>具体的修改内容如下：有需要的可以自行调整。</p>
<img src="/2020/04/27/create-blog/update_css_font_config.png" style="zoom:50%;">

<p>到此为止的话，我们关于 NexT 的这个主题的个性化修改目前就到这里了，目前的这个阶段已经完全满足了我们的博客的内容展示。后续的一定内容请一定要参考官方的修改配置</p>
</li>
<li><p>取消文章目录的归纳数字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">toc:</span><br><span class="line">  enable: true</span><br><span class="line">  # Automatically add list number to toc.</span><br><span class="line">  number: false</span><br><span class="line">  # If true, all words will placed on next lines if header width longer then sidebar width.</span><br><span class="line">  wrap: false</span><br><span class="line">  # If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span><br><span class="line">  expand_all: false</span><br><span class="line">  # Maximum heading depth of generated toc.</span><br><span class="line">  max_depth: 6</span><br></pre></td></tr></table></figure>

<p>将number: 属性的true 改为 false。</p>
</li>
</ol>
<h3 id="3-ToDoList："><a href="#3-ToDoList：" class="headerlink" title="3. ToDoList："></a>3. ToDoList：</h3><ul>
<li><input disabled type="checkbox"> 待验证文章页面展示是否有效</li>
<li><input disabled type="checkbox"> 自定义域名 &amp; 域名访问</li>
</ul>
<h3 id="4-部署到GitHub上"><a href="#4-部署到GitHub上" class="headerlink" title="4. 部署到GitHub上"></a>4. 部署到GitHub上</h3><ol>
<li><p>关于部署我们需要知道我们的部署地址：它需要对应 GitHub 的一个仓库地址，这个信息需要我们配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: &#39;git&#39;</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;Lofoer&#x2F;Lofoer.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>目前这里的 repo，是填写我的，后续需要修改成你们自己的地址。</p>
</li>
<li><p>安装 Git 的部署插件：hexo-deployer-git</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>安装完成后执行部署命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

<img src="/2020/04/27/create-blog/hexo_blog_img.png" style="zoom:50%;">
</li>
<li><p><strong>设置部署脚本</strong></p>
<p>在项目文件夹下面新建一个 deploy.sh 的脚本文件，内容如下：   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>这样我们在部署的时候只需要执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh deploy.sh</span><br></pre></td></tr></table></figure>

<p>这样我们写完博客后可以完美的更新博客了，非常简单。你学会了吗？</p>
<p><strong>特别说明：</strong> 每当我们完成了一个小的个性化设置的时候，不妨通过hexo命令在本地进行预览<code>hexo s -g</code> 看是否达到了自己的预期。</p>
</li>
</ol>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li><p><strong>关于Hexo的问题：</strong></p>
<p>一般我们在安装hexo 插件的时候不会出现什么问题，但是有时候就是安装不上插件，这个时候一般使我们的源出现了问题，如果你对源不了解，没关系，按照我的操作执行，都能解决。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>或者在安装插件前加上 <strong><code>sudo</code></strong></p>
</li>
<li><p>关于4000端口被占用问题：**</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lsof -i :4000</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">COMMAND    PID   USER   FD   TYPE             DEVICE SIZE&#x2F;OFF NODE NAME</span><br><span class="line">Google     796 vivian   24u  IPv6 0x3f05d2f78b8f93ed      0t0  TCP localhost:52958-&gt;localhost:terabase (CLOSE_WAIT)</span><br><span class="line">Google     796 vivian   26u  IPv6 0x3f05d2f78b8f8e2d      0t0  TCP localhost:52959-&gt;localhost:terabase (CLOSE_WAIT)</span><br><span class="line">Google     796 vivian   30u  IPv6 0x3f05d2f78b8fbc2d      0t0  TCP localhost:52960-&gt;localhost:terabase (CLOSE_WAIT)</span><br><span class="line">Google     796 vivian   39u  IPv6 0x3f05d2f79de69e2d      0t0  TCP localhost:52961-&gt;localhost:terabase (CLOSE_WAIT)</span><br><span class="line">Google     796 vivian   61u  IPv6 0x3f05d2f79de6a3ed      0t0  TCP localhost:52962-&gt;localhost:terabase (CLOSE_WAIT)</span><br><span class="line">Google     796 vivian   85u  IPv6 0x3f05d2f79de6af6d      0t0  TCP localhost:52963-&gt;localhost:terabase (CLOSE_WAIT)</span><br><span class="line">node      2658 vivian   39u  IPv6 0x3f05d2f79de6d1ed      0t0  TCP *:terabase (LISTEN)</span><br></pre></td></tr></table></figure>

<p>注意看node，就是这个PID端口 2658，如果释放这个端口？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill -9 &#123;PID&#125;</span><br></pre></td></tr></table></figure>

<p><strong>{PID}</strong> 替换成你的被占用的PID号</p>
</li>
</ol>
<p><strong>结束语：如果您通过我这边文章成功创建了属于自己的个人博客的话，那么不妨通过下面的打赏按钮对我进行支持！谢谢。</strong></p>
<img src="/2020/04/27/create-blog/640.gif" style="zoom:5%;">

]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>工薪家庭的股票投资-实战篇</title>
    <url>/2020/04/28/record-stock/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="该文章已加密, 请输入密码查看。" /><label>该文章已加密, 请输入密码查看。</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="338b6728ea58afe03d33147a05da581793dc1405ef88332eb68ca171a30e5043">746f0d511754ca3f33462be9dd707f3528500e87c57db33ff362b96c63ef72c14b6ed8c29c180a3a30479534862d6ec4ae2b58532f48a84aeaf231006220cd0de5538035d0e686cb73b8ee49cda7bfcc3aaec53ae80317947a4068d70546d48f65da8036a14e37dfd5edf8f92e39dc397d0f15acdb91b864754e079e3652ce36fc08d446e3027aa3991ab609732b8ec2bf102d8dfb3372c3bf28a35c62a8ebb5640f1df54f347a5aebd6531bda0288632c1163bfedfe1fbcff7ccd257d9882457b4f08e4bdff87dd25a8146a4c940eb1c798869eb3b4b078663e6318ab803ee34444f787f795435370330c82b29d1a3bf96d0ad624674a511b06a3c7c66c87729899c71828134fafdc4b7cfab9c846be5bdec16e9cf140f8b1a5b5ebfcaf580767348f6ee16d8fb3024ba951f6ab3ecc5951d955ac4b8022c1b1839d08ad7fee105d4134ecabd2269d274e13c31df04884baf91ba966a68a00229b944e7f7e9183a286a490cddd6f27fb33ac7a660b9af83692ad0d459f7ae00dd967d9f870f72a783c0c471d1a223460d75e0f27cab1cc69da5f9c96cff6cef17d24d453ea00ab2462de75064b38bd485e356eb792b2e599ff088b81fcd41a88273ade57b8b64f86068d6358d08c9cf4f54f1c471989e4379dc8f2cf7b2461b6726096567c03985f993c70a4219ced12f769b2a110c13d81ca00966b7c3964c99169778b9f984435fa4d3d843075681ce5d78bbc08d0f6c565b4947c52b728e967d8f6d0b17bf6cdb998e3bf54620a303587252d0297d552a8fce5640b7b4ddf64d86c8fff58570c2da585344f4c20fd3c80090ea439cf1ee3beaf419ab6d68bd15b167e8110160b88b2b3c5f53f790f4d3a3938618b3affaa6dcc62301f318cff8db81b61fc91e88019685a7eca7e6cd5748ddf91c071acf4fb3acde03e4b6e66b87ff6d40c02da83a8aeeeb29c53b7ff085c4a1c24bd03733a9d31505937f2b3e2ced3bcf19cd5168b17d3ffea0ece9589296edaf252af18f33a609b20ad605da9cee61f51411bcec04b5a3992f5edafa82525a11fd812eb167686ffed3b935dd55e23b228b9afb6a30a27f8dbac348efc4b7a38b21a383c5fbbcebd29fbbcb58f13ca06a1b80c4cbd960c4066e400ee73886d0e22fe607b5fcae2c066eddb65da528ad4dffb401fa0acd74273cacecbbf297bf37f7bbcf89c4741e3b440bc016f994f0ead82a5cc1fe4cfcd3f083e578a1a330110483395437403d105cdc1df47ed3f5ea2d25ccdd0ade554379df134e0351f87f6ba4a4b39e38a097236f0ce2da6345a9e85ac5597f68307b77704c895abba51be7a85d7c1776c51131913bd5f0a1a486c3fcdf2a1c15fae9a9146876ad994910e4a93202bf615a483c64f5239bb8eda2e3a56d447055148cee51d062e5d86f9d16932f5671fee977df35ff7cf847ee8a6e188208388ce8dd7a86b9ffa0c5ee92ebdee4632003b75872d3bc9c51c24aa06862c8cb1d495340ca10c41401c701597727c818afc4e69097bb4a648f020c99c442ab726c597cd98cc302b44c38c123daf2ccd5f3dfb1e3560b10806d71cc768c28acf4ab3bbbf60f1f17ef83d47c0083dff7723dc4abcf47232557109eca1517b6bb1b0e704941caa36896a88f99d3db88347d61aa95597912daf35ee2623a9d97d2e37e4ca6cfaeab887f4dc7cc814dbb607fa5e7faeed2ddc21d5e41f8415345efae81750ea31c367d22f66f8da9c9e3ed62b81ba0579379af047c7df666d77dd2ff00e86009869076c620a9d16fb34fd905b5423245fd7ae9204901a3099a95bfd0fb79a8009418b87c6ea5b3fb008ab3554dfc63b5e4708be8e10c8bf8ed63cc7ed71ccb9e7720d0e6d89fd8757f0f0f5dbb883499cdc6f21a254bf0fac512bac0db69ca2c6b2973af4b99cadbd8b56347b16104dc6aff7dc53a5b6f74c11f3976950c2bb5685a0bc94bd63c9960f4580510faf3e1b23a80b5d2e96c762f0228603a7934564954ebd69e505e4d84026e83ef2cd73ab46cec2b8a03c59b0410b9865fba61a6ac1fa49b5b43f2c7a29371e33a03f1898b3e9183dfcdf59488e1e56cda9853623ff33795ac1f753ab8e0120c4dcbca89f39dd09a4b5552c99d4def1ca5d88b27d70ed6a1839daa465aee01b95ec1e9f8c9aa4fb6daf8b8374896afc51e4b97487e3554c9a1f8ce99201813cc1142946697ce3d62942c6e828377b60d16c9cfbf509b61a9061f739979effbdf26bab1a651fd9caeaba39134da6020861c3ba0c6bcc86022001c566516338c7a19ea436f54b60acbeae1cff7dd269af3aa8f0913d857aaf953d3a0b222e72102b6363611bf41a23c7c57c08431729d67f73d293069cf2d0425c6d0c3919393f55f2e1b954d1e129fa5b28a7bf2211d535321d819e4273e9fe7a2a440dc7f7635e9ee9d52bba534ba88e0ea4fb986f5e492fed9729e5f11300afd56eee13ad881bbef13538e62795ae07e61569cf3254d5d5f8349bd56af32e7d786fffa0739af16124286bf70fe48025aa19096037d9d44cf8b0349c27e7f448546a54f91a2328bddbc7f121a400df48820db9d9fa50a7e74fef0e856e163575a110e58853fe1bf066d1034532e498c9055e4569febdac501a253b79634e079e4f4083611105bb44f2ba985422f52e2a994630a70688925d1e6a2e42cc96471fad6b84711aa28dc577e13294ffd084f45e8db5f51e37ee5eb5ec90014d08a0e2e36f0fbc0c0e7777c096967c2e029da60d5151e54244467363912473beb090392b90f773e3550c5fb558355ec7ba9a2528ad852381e6ee4410070a2d32d852f2f4c351497d6a90c6a73c46fe037a7cee990a2da099ee00aa9d51bb32466211a3b3962a339c9b160805a9ac2a9eab66e7c507e910290578a53c09d92fc0a6ba08ab4012674b4724e20276a61ed7d3880f6cd2faa1c0e6f1fcabe26e36e562df7d095ab2081fa8d2bdfdad524e4174a1d501057877b69e6c7c7d4182305ff594066f7b702cc8bff82952bc8d0f222396741f34a6ec0d17c22fae2a2aae2457d2795f3ab412d9d8eb66376b1caed1b3763296c2c972be8cb4cb680c1e43397c6bfa9f2e43035b3a84ed254df748920f51b60527ef319b294db6b8140017791abd9af4fd495671462a7fac878174404350a03c44ac5e0dbaa16edfbe65a238871454566434399fb275532fa182ac1c19383342b3d47c86f2e71c0ccb942444c5ccced7082da2d82a2512f28c682378769341158ee2b71b52fd62c199d08ba09ac3fa108212c7b3854f58a94dc9e867c82fb9344ec75784d6796cf98a2bc58ceea6f09d1575d7a416601ac8f574f8423a81048fa24188ebe368943123b1e58478e8f83aa324814f328c589b80962f6f688116d2360b306b538447fe937c8ea5111740af6016a78e6c0a130b6c57eb221f19dbdc2e2d1cd4e5255569ea304da77c8d8c9339c0e89f296ac4a8841538cf49db3380dcf5e0e847a0f2db61d3e6ef3e1a2ae0ba29a8434ecc074820a017d4a0c8529377aeb297bea9244f213d983b53df60bfeadf19bee88f24d4e1189414debd71cb7d2c430b7be37186478db9ce6dc67192b503e3826c8b69c76edc64af77c5b03ffb1a936498ed7add418bf4e5da74cdcc12957f1272ab6b801b83701b1005b0ec96d90588b1c96adc67c8b9827be63eaf48c82bf315cb1596ea51d807e97ddcd8b743d72c092ef00585888f36d61f36fc04a9e3f9fd62527a8ffb78b441da620237b08b55ee16d64a07f51dbaff958030887d0890345fea504b96fdc1f7a6300947393d6b14b4452a27a6d2e23cd539b236a30c4d525946fe4b1f8e808855f70752b662d3938a91378ac8a9ed73252a1f6dadc0c54521af2c2774299b1b13efb8e3e2cdf7f97cbc943ada156779bc0d703cbb3c1c00c60a2119d031eaffbd984acfddfd8beeb117ec87c4f1d92c45ac763858d232dad39414e9fb480dedd8e361b9af716faa2286b14a8b7af50e019a2807ebb0c73177f5b6f99eb75380c17c71f7d87b32591562de2f72e256c4f0996eb9e00db02050bda57417a05d4f8ba0eba24056376da39c5835e1f1d624701e43c08a02ca95098e2ca07691a3a0ee793b466fe49eca69a3bdd8d5fdff199660577a30e1e8bcb4f6944e68d18613b653a94f76ecadc0c5e1a22b2aa8017927b5e7e1e0b7dce1d1bc42e5fbd640e47dcb8ac7c34cafc5be191d420579da762ce6f61dd1e835678dfbb207cf7b8c5ba5f5d9673033776cb408bcffc02b05e5ca3dc848360cb47e253d2b03eccf32574f7f3e08241afd4cb861aa5e4b1f09ef709ee3104e5ac41a626414b604af46fa06c6888738cfee4a508622cd70bc09e96d47399f5d585257a2d771d01da24b9fc739beac6bdd8e07cd1a7fc8344b037fba234054d70918b9bb8671d01bce35c02dc53db1d296c4b2f5d284a729cd588e893fdae83b6036204de954b3e91b1fd10aedb5a2f39178f59e167f1730b3caa39b50bb3a0ee9ad65af82a11e1c476670cb77372dd5ae5830731328ce25f1d234f3707fc138a483ebcc922105ad02ac11dab2f546b7f158ea090c96e8eceafe800b7056917cfe8566a64333f32368512cd4b62beae8c20f7d20da353ca331995b979d7c1b678ddf1685fd5561550956fd796635703c1aee2e67f7747864e8c7c76b1bbdf0cdea6f1d7cec3f6358cde4d00221ef5bb26e53d21fd6e57271739df4269527d607f60881e687987abae2f303189724c955b528c72723276ea232972d3a25c53db7c8df8b81ee18352df577419978abb96c04713408fe572d7fa8d3e09bd51db2acc0130a0a61bd38c0221df06b98570f4cbb6eec543495605d4a3e66b54aac32277f082e5103eee97146d7d38d120e2a7ca0faf4d4bea70e434ca5282029d85672e11412cf69d034ae43d468c6c5d5e32b266784f7290efc5bb98f3d69e0411fe11d0ba734e1ffd514eaf4a80718cdce900e93775ab9beee616fa1766a73fbdfabe561ba6b11a7e6f54e8be328aaeba0f2d7de56fb13e465c853e92eb5235cc3abea79733b64e9b8bb438cd8261da2f98312547318cab3cdf6a3548e1b75f4ba25efde3305d093f8e396ccee25de0d446466dff32e32fd1b90b7f92591fc8f050ee0f5a64a717383a05fba9e389d90f8af78af435b22b131f97d7899ecd46760c81886540506ba23970ae83675fd90aadfbb04119615dada040eb8d31284492897ae971bbe98e3940d8ee67d2a3479659244e6c6e239d1425309adb3d9e62c7bbf3f5f94ae99cb632cb2400c642ac3a8cf7377581f45f3808c42797e8066cc8828791584f7f0cb25f9f408850d5be5c37c8fe2cdccf73bb317845440a1c7a5270a1be8097024080a76f0af2ce58f169563fb3234dbeafe7f807e6335b501ab7060e5735f94220bf0b948a76af70ed24b10aaa134cc30f3fc159dd8293a6f1f8ca18b33e610208b67f3e4f9273325985a9c311ab128f067c325d05f33e7485f31bd9449afbd81781e7c50e7936f94c9dddb9c642bdfafbe60329329b9ce6ea8a7523009a1868bf0e5b1df74d89c5cb07cce0c2cc096624e0d9b0e4df3509327cd14e5d11c989355c8c8bea59a3e53dee836fca87244c0590d13286d5ee729aa64630437a0262be9478f8801c644bfbf7a871716b5f375f889c8392e58574d6c09206c11e980d63291e18e6b0a398af9bc777f49595b04f1f1a385ce6bbec555c66413f7008eda2eb09cb97fbb5fbfbee9e03578d3071bee0100d4dc5b5eb2243b39d368ae9b9072c8a04a07191f0d2cc7a0b30b52b1182563892e92e0097b4074ccd42222f20fc467f0cde5b2e47fce1e4d198ba6ff2ef9e16c2dff8e7e9d1b98103757a29afdac1bbdc35ab0f6bea5a22b93461b4c047779fc8d6c5f0ab52022992b5a74984f9be64a71be0e905c646e2320555c7645fa4ef8227419a2656d71a32ef7fb6bf8f07d1d1aef9c9d53aed2d9eb3c985daa308b3b9545b0aaecda05508c293ac165adad5c7b7b77b8c9325a36dd41a442451cb63c186b2150041a6190428584c5eb6a540731ed560871160eecc94672d93e1fe65bec099f99c43d815dea40dc7efee05861d5ec55d246f0ad7e0adfc190d894d63e69bf1d5e7ac511193f7dcafea5b4a5fb42baa51454acf9f6f96f691981e6a464e43b288a0f2d2606fce6b1c8d08f89f4995b718f1024ef2fbbd1ab910c9c5a81f9077ac2a36a6157749fe147f36abb1ef67d8d2483f4c4beba7075efa92b76125cb843cecfadc12f2f8946ccb23436ca5f8fd4780a2c77d55ddca518edda516832cc33bb4ce48d8ae8ed5255c97659ae71bccd10491f5f460a46027ca2b24e10af9b6b80b468797a000ca9f8de79d648203dadfdb6c387401e84f210f3ed43a0d5854371b0701f3dd79ad3c0ad3fe3eb1294ecf8741d4e47e97937002248f3194111f38facc3e810926a162241f8b5b45cad8caf2f5f39f6e1541661049a8719d5ee9e44860b0a8c6754ec1f0a7cf6db129bdef6a00b211315413b1c015edec54eaedd3f7d77fe31f7867f49f26ccff04bf9d6d7e0c42961dd68db59b8b7c00f1724a4e3510a2c83b9f9aac0678262c18eff2a8204911e2c45773a2a066e2787e949547776cfd7e75c058282c5ca934b9d07359ff612f74dc5f6d89709e3888ddc06f2b9cf1df7a96ffd95ff931fb6709f1d6e4a765c2a376f9f37261088664801f5b765604ff568e5315eb74a17c4e9821378a3a8a9cf275b31917645bfe7b95d825f1616534d39b378305364ad8d97290fe75021a0460117bd167aad13c5c12134cc737dc870349173bf00e9b71f50d18cb202b65d776e65a17efa90bfc93ff32c415f8f0f8a9dea8a0042e227d935736e723ee8a4f17dbc656a653300b82d24de757305b0277a7ea06b6a2d2d4e89ea7e9b81c92c6b4ff100f2ffed6ccb743f89d4a736d6de85b67c3fb91b3100386849e41e4428a94ad83f3d7926f91cb0727870931e1fad5409cc67706926dde7fe21c9fe8f132cbef74b884b21a5c3da408ef280dae9329673abf95c337d4daba61d1a93bae3579e95e6dd5a8dfc65a61f4b5f77e968701f07281eba405b66b37f85a2bf73844e842bbd8731034ec3acfcbc5ae1c2ba96a545ff31c6e1d0788187f28822caed8be68e8a68a71300085f8b9ba40bae0a73be81eb35ff66aca2d3772b354127787bf76e5fcb594579ee7d659d974a38e2009e0216e83bc331640092befa61d1d6306f7321b9d8cbb52a3368deff085d2dd1272de90a73eb2c06a39ad07593cdbc134461427c66864357fcc4dd82ee4cdbda3d1887baae5f9debe9bb8646259b428b35be38eb3a5bf3f6edac79b0c2ac464c292cefef82dbc53301b001374b2aaf180cb2cddb2d310a56d5848498712addd8fa5f0205a006bec135a193cdc9f98983554e37ebe60e0c29ee21e3d0f73b3774501c3ab00e83cdf5129a3b90ce878d9d702f0b5cb1703b27e69226d1f936e2c97f7011f7ddec85358a766c7904ea1ba4bc6a292f7aafd2a095646e9601173576a06eb11baedf79c0ad0bf8c48ebb03966728dc0bdd35ca176672588b1f6c1c5be2317535bae64f8748a9e59754714a89180df2109785120785dc96a6424f62197ea6ed20d77e2447132620584515c6d0718d90bc0355ada6e3f1c5e2f8a020175a1fd70b37dcaf2a55b505743aa44a2f801ceedef3a455de333eb7f9aabde0990e0b46d06dcf090843dd612a68d17709cf84a462a6e6b65dca45fff8d28dd9001dc8191f29fcd964a27f5dc26c3c17ab9b8a3d1a8340449b9a522bece01ca667ed6a5cd60338d86ce1c883ebcfcd6196e67154b437cc0a602d5a7f8c2f9a6cfe15bb1095e6499225fc4d32b37b370260cfc21f1580a4fa9d4f326e34eb0c9f52795d4016ddb1629edc9386c2c1cb3f7ace</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>股票投资</category>
      </categories>
      <tags>
        <tag>股票操盘手</tag>
      </tags>
  </entry>
</search>
